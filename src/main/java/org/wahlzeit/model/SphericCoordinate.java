package org.wahlzeit.model;

/**
 * Spheric coordinate class
 * 
 * Saves latitude, longitude and radius
 */
public class SphericCoordinate extends AbstractCoordinate {

	/**
	 * Latitude in degrees
	 * 
	 * Valid range of values: -90 (south pole) to 90 (north pole)
	 */
	private double latitude;

	/**
	 * Longitude in degrees
	 * 
	 * Valid range of values: -180 to 180
	 * 
	 * 0: prime meridian
	 */
	private double longitude;

	/**
	 * Radius in km
	 * 
	 * Valid range of values: >= 0
	 */
	private double radius;

	/**
	 * Constructor of SphericCoordiante
	 * 
	 * Only accepts valid values for latitude, longitude and radius
	 * 
	 * @param latitude
	 *            (valid range: [-90,90])
	 * @param longitude
	 *            (valid range: [-180,180])
	 * @param radius
	 *            (valid range: >= 0)
	 */
	public SphericCoordinate(double latitude, double longitude, double radius) {
		assertIsValidLatitude(latitude);
		assertIsValidLongitude(longitude);
		assertIsValidRadius(radius);
		this.latitude = latitude;
		this.longitude = longitude;
		this.radius = radius;
	}

	/**
	 * See Coordinate interface for documentation
	 */
	@Override
	public double getLatitude() {
		assertClassInvariants();
		return latitude;
	}

	/**
	 * See Coordinate interface for documentation
	 */
	@Override
	public double getLongitude() {
		assertClassInvariants();
		return longitude;
	}

	/**
	 * See Coordinate interface for documentation
	 */
	@Override
	public double getRadius() {
		assertClassInvariants();
		return radius;
	}

	/**
	 * Calculates longitudinal distance to other Coordinate Range of distances:
	 * [0,180]
	 * 
	 * @methodtype get
	 * @methodtype composed instance
	 * 
	 * @param c
	 * @return distance in degrees
	 */
	public double getLongitudinalDistance(SphericCoordinate c) {
		assertClassInvariants();

		// precondition
		assertIsArgumentNotNull(c);

		// if distance is larger then 180 return the shorter distance
		double distance = Math.abs(this.longitude - c.longitude);
		if (distance > HALF_CIRCLE_VALUE) {
			distance = CIRCLE_VALUE - distance;
		}

		// postcondition
		assertIsNonNegativeValue(distance);
		assertIsNotNaN(distance);
		assertIsNotInfinite(distance);

		assertClassInvariants();
		return distance;
	}

	/**
	 * Calculates latitudinal distance to other Coordinate Range of distances:
	 * [0,180]
	 * 
	 * @methodtype get
	 * @methodproperties composed instance
	 * 
	 * @param c
	 * @return distance in degrees
	 */
	public double getLatitudinalDistance(SphericCoordinate c) {
		assertClassInvariants();

		// precondition
		assertIsArgumentNotNull(c);

		double distance = Math.abs(this.latitude - c.latitude);

		// postcondition
		assertIsNonNegativeValue(distance);
		assertIsNotNaN(distance);
		assertIsNotInfinite(distance);

		assertClassInvariants();
		return distance;
	}

	/**
	 * See AbstractCoordinate class for documentation
	 */
	@Override
	protected Coordinate asOwnCoordinate(Coordinate c) {
		return asSphericCoordinate(c);
	}

	@Override
	protected void assertClassInvariants() {
		assertIsValidLatitude(latitude);
		assertIsValidLongitude(longitude);
		assertIsValidRadius(radius);
	}

	/**
	 * Convert Coordinate object into SphericCoordinate
	 * 
	 * @methodtype conversion
	 * @methodproperties composed class
	 * 
	 * @param c
	 * @return
	 */
	public static SphericCoordinate asSphericCoordinate(Coordinate c) {
		// precondition
		assertIsArgumentNotNull(c);

		SphericCoordinate result = new SphericCoordinate(c.getLatitude(),
				c.getLongitude(), c.getRadius());

		// postcondition
		result.assertClassInvariants();

		return result;
	}

	/**
	 * hashCode-method generated by eclipse
	 * 
	 * @methodtype conversion
	 * @methodproperties primitive instance
	 * 
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (int) latitude;
		result = prime * result + (int) longitude;
		result = prime * result + (int) radius;
		return result;
	}

	/**
	 * equals-method generated by eclipse
	 * 
	 * @methodtype comparison
	 * @methodproperties primitive instance
	 * 
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof SphericCoordinate)) {
			return false;
		}
		SphericCoordinate other = (SphericCoordinate) obj;
		double delta = 0.001;
		if (Math.abs(latitude - other.latitude) > delta) {
			return false;
		}
		if (Math.abs(longitude - other.longitude) > delta) {
			return false;
		}
		if (Math.abs(radius - other.radius) > delta) {
			return false;
		}
		return true;
	}
}
