package org.wahlzeit.model;

/**
 * Cartesian coordinate class
 * 
 * Saves latitude and longitude coordinates
 */
public class CartesianCoordinate implements Coordinate {

	/**
	 * x coordinate
	 * 
	 * all double values are allowed
	 */
	private double x;

	/**
	 * y coordinate
	 * 
	 * all double values are allowed
	 */
	private double y;

	/**
	 * z coordinate
	 * 
	 * all double values are allowed
	 */
	private double z;

	/**
	 * Constructor of CartesianCoordinate
	 * 
	 * @param x
	 * @param y
	 * @param z
	 */
	public CartesianCoordinate(double x, double y, double z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}

	/**
	 * Getter for x
	 * 
	 * @methodtype get
	 * @methodproperties primitive
	 * 
	 * @return
	 */
	public double getX() {
		return x;
	}

	/**
	 * Getter for y
	 * 
	 * @methodtype get
	 * @methodproperties primitive
	 * 
	 * @return
	 */
	public double getY() {
		return y;
	}

	/**
	 * Getter for z
	 * 
	 * @methodtype get
	 * @methodproperties primitive
	 * 
	 * @return
	 */
	public double getZ() {
		return z;
	}

	/**
	 * See Coordinate interface for documentation
	 */
	@Override
	public double getDistance(Coordinate c) {
		assertIsArgumentNotNull(c);
		double[] thisSphericRepresentaion = this.asSphericRepresentation();
		double[] otherSphericRepresentation = c.asSphericRepresentation();

		double lat1 = Math.toRadians(thisSphericRepresentaion[0]);
		double lat2 = Math.toRadians(otherSphericRepresentation[0]);
		double deltaLong = Math.toRadians(Math
				.abs(thisSphericRepresentaion[0]
						- otherSphericRepresentation[0]));

		double deltaSigma = Math.acos(Math.sin(lat1) * Math.sin(lat2)
				+ Math.cos(lat1) * Math.cos(lat2) * Math.cos(deltaLong));
		return EARTH_RADIUS_KM * deltaSigma;
	}

	/**
	 * See Coordinate interface for documentation
	 */
	@Override
	public boolean isEqual(Coordinate c) {
		return equals(CartesianCoordinate.asCartesianCoordinate(c));
	}

	/**
	 * See Coordinate interface for documentation
	 */
	@Override
	public double[] asSphericRepresentation() {
		double radius = Math.sqrt(x * x + y * y + z * z);
		double latitude = Math.acos(z / radius);
		double longitude = Math.atan2(y, x);
		
		// denomalized: latitude to valid values (-90,90]
		double degreesLatitude = Math.toDegrees(latitude);
		double denormalizedLat = degreesLatitude < QUARTER_CIRCLE_VALUE ? degreesLatitude : -HALF_CIRCLE_VALUE + degreesLatitude;
		return new double[] { denormalizedLat,
				Math.toDegrees(longitude), radius };
	}

	/**
	 * See Coordinate interface for documentation
	 */
	@Override
	public double[] asCartesianRepresentation() {
		return new double[] { x, y, z };
	}

	/**
	 * Convert Coordinate object into CartesianCoordinate
	 * 
	 * @methodtype conversion
	 * @methodproperties composed class
	 * 
	 * @param c
	 * @return
	 */
	public static CartesianCoordinate asCartesianCoordinate(Coordinate c) {
		assertIsArgumentNotNull(c);
		double[] cRep = c.asCartesianRepresentation();
		return new CartesianCoordinate(cRep[0], cRep[1], cRep[2]);
	}

	/**
	 * Assert if Argument is null
	 * 
	 * should be in abstract Coordinate class
	 * 
	 * @methodtype assertion
	 * @methodproperties primitive class
	 * 
	 * @param c
	 */
	private static void assertIsArgumentNotNull(Object c) {
		if (c == null) {
			throw new IllegalArgumentException("Given Argument is null!");
		}
	}

	/**
	 * hashCode-method generated by eclipse
	 * 
	 * @methodtype conversion
	 * @methodproperties primitive instance
	 * 
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(x);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(y);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(z);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}

	/**
	 * equals-method generated by eclipse
	 * 
	 * @methodtype comparison
	 * @methodproperties primitive instance
	 * 
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CartesianCoordinate other = (CartesianCoordinate) obj;
		if (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))
			return false;
		if (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))
			return false;
		if (Double.doubleToLongBits(z) != Double.doubleToLongBits(other.z))
			return false;
		return true;
	}
}
